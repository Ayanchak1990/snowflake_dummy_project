-- USE DEDICATED WAREHOUSE FOR COMPUTE PURPOSES

USE WAREHOUSE CONVEX_INSURANCE;

-- CREATE FILE FORMAT TO BE PREPARE TO READ DATA FROM STAGE

USE SCHEMA CONVEX_INSURANCE.CONVEX_STAGE;

-- CREATE CSV File Format

CREATE FILE FORMAT csv_load_format
    TYPE = 'CSV' 
    COMPRESSION = 'AUTO' 
    FIELD_DELIMITER = ',' 
    RECORD_DELIMITER = '\n' 
    SKIP_HEADER =1 
    FIELD_OPTIONALLY_ENCLOSED_BY = '\042' 
    TRIM_SPACE = FALSE 
    ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE 
    ESCAPE = 'NONE' 
    ESCAPE_UNENCLOSED_FIELD = '\134' 
    DATE_FORMAT = 'AUTO' 
    TIMESTAMP_FORMAT = 'AUTO';

-- CREATE JSON file format

CREATE OR REPLACE FILE FORMAT JSON_FF
  TYPE = 'JSON'
  STRIP_OUTER_ARRAY = TRUE;
  
-- LOAD JSON Data into stage area and from stage to stage table
 
-- CREATE STAGE AREA for Transaction files

CREATE OR REPLACE STAGE STAGE_TRANS_JSON
 URL = 's3://convex-insurance-test-data/convex-transactions/'
 CREDENTIALS=(AWS_KEY_ID='xxxxxxxxxxxxxxxxxxxx' AWS_SECRET_KEY='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' )
 FILE_FORMAT = JSON_FF
;

-- CREATE INTERMIDIATE TABLE FOR PROCESSING

CREATE OR REPLACE TRANSIENT TABLE STG_CONVEX_TRAS_JSON (TRANS_JSON VARIANT);

-- FLATTERN THE DATA FROM THE JSON STRUCTURE 

CREATE OR REPLACE VIEW V_STG_CONVEX_TRANSACTIONS
AS
SELECT 
TRANS_JSON:customer_id::varchar AS customer_id,
TRANS_JSON:date_of_purchase::TIMESTAMP_NTZ(9) AS date_of_purchase,
bsk.value:product_id::varchar as product_id,
bsk.value:price::number(38,2) as price
FROM STG_CONVEX_TRAS_JSON
,lateral flatten( input => TRANS_JSON:basket) bsk 
;

-- STAGE TABLE FOR TRANSACTION DATA 

CREATE OR REPLACE TABLE STG_CONVEX_TRANSACTIONS
(
HASH_LINK_TRANSACTION_ID VARCHAR,
CUSTOMER_ID VARCHAR(255),
DATE_OF_PURCHARE TIMESTAMP_NTZ(9),
PRODUCT_ID VARCHAR(255),
PRICE NUMBER(38,2)  
);


-- STAGE FOR CSV FILES 

CREATE OR REPLACE STAGE STAGE_CONVEX_CSV
 URL = 's3://convex-insurance-test-data/'
 CREDENTIALS=(AWS_KEY_ID='AKIA4CJKXIOUNVBUWZMZ' AWS_SECRET_KEY='TtdWRy8a+L6psGzvykjsl/0KNPtV+pHQW+UlnMBL' )
 FILE_FORMAT = csv_load_format
;

-- VIEW FOR EASIER PROCESSING THE INSERT DATA

CREATE OR REPLACE VIEW V_STG_CONVEX_CUSTOMERS
AS
SELECT DISTINCT $1::VARCHAR AS customer_id,$2::NUMBER(38,2) AS loyalty_score 
FROM @STAGE_CONVEX_CSV/convex-customers;

-- STAGE TABLE FOR CUSTOMER DATA

CREATE OR REPLACE TABLE STG_CONVEX_CUSTOMERS
(
HASH_CUSTOMER_ID VARCHAR,
CUSTOMER_ID VARCHAR(255),
LOYALTY_SCORE NUMBER(38,2)  
);

-- VIEW FOR EASIER PROCESSING THE INSERT DATA

CREATE OR REPLACE VIEW V_STG_CONVEX_PRODUCTS
AS
SELECT DISTINCT $1::VARCHAR AS product_id,$2::VARCHAR AS product_description, $3::VARCHAR AS product_category 
FROM @STAGE_CONVEX_CSV/convex-products;


-- STAGE TABLE FOR PRODUCT DATA 

CREATE OR REPLACE TABLE STG_CONVEX_PRODUCTS
(
HASH_PRODUCT_ID VARCHAR,
PRODUCT_ID VARCHAR(255),
PRODUCT_DESCRIPTION VARCHAR(255),
PRODUCT_CATEGORY VARCHAR(255)
);

-- PROCEDURE TO LOAD DATA INSIDE TABLES 


CREATE OR REPLACE PROCEDURE PROC_LOAD_CONVEX_DATA()
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS CALLER
AS 
$$
BEGIN
    copy into STG_CONVEX_TRAS_JSON
    from @STAGE_TRANS_JSON;
    
    INSERT OVERWRITE INTO STG_CONVEX_TRANSACTIONS SELECT MD5(CUSTOMER_ID||PRODUCT_ID) AS HASH_LINK_TRANSACTION_ID,* FROM V_STG_CONVEX_TRANSACTIONS;
    
    INSERT OVERWRITE INTO CONVEX_STAGE.STG_CONVEX_CUSTOMERS SELECT MD5(CUSTOMER_ID),* FROM CONVEX_STAGE.V_STG_CONVEX_CUSTOMERS;
    
    INSERT OVERWRITE INTO CONVEX_STAGE.STG_CONVEX_PRODUCTS SELECT MD5(PRODUCT_ID),* FROM CONVEX_STAGE.V_STG_CONVEX_PRODUCTS;
END;
$$
;

-- CREATE STREAMS TO HAVE THE DATA CHANGES TACKED AND LOAD IT TO THE DATA VAULT

CREATE OR REPLACE STREAM STG_CONVEX_CUSTOMER_STRM ON TABLE "CONVEX_INSURANCE"."CONVEX_STAGE"."STG_CONVEX_CUSTOMERS";
CREATE OR REPLACE STREAM STG_CONVEX_PRODUCT_STRM ON TABLE "CONVEX_INSURANCE"."CONVEX_STAGE"."STG_CONVEX_PRODUCTS";
CREATE OR REPLACE STREAM STG_CONVEX_TRANSACTION_STRM ON TABLE "CONVEX_INSURANCE"."CONVEX_STAGE"."STG_CONVEX_TRANSACTIONS";

-- SCHEDULE TASK TO LOAD DATA EVERY DAY AT 8AM UTC


CREATE OR REPLACE TASK TASK_CONVEX_TRANS
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = 'USING CRON 0 8 * * * 	Etc/Universal'
AS
CALL PROC_LOAD_CONVEX_DATA();